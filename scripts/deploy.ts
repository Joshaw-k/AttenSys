import { Account, CallData, Contract, RpcProvider, stark } from "starknet";
import * as dotenv from "dotenv";
import { getCompiledCode } from "./utils";
import fs from 'fs';
import path from 'path';
import prettier from "prettier";

dotenv.config();

const OUTPUT_FILE = path.join(__dirname, '../../AttensysUI/src/deployments/abi.ts');
const CONTRACT_OUTPUT_FILE = path.join(__dirname, '../../AttensysUI/src/deployments/contracts.ts');

const Comment = `/**
 * This file content is autogenerated at contract deployment.
 * You should not edit it manually or your changes might be overwritten.
 */`;

async function main() {
    fs.writeFileSync(OUTPUT_FILE, '');
    fs.writeFileSync(CONTRACT_OUTPUT_FILE, '');
    const provider = new RpcProvider({
        nodeUrl: process.env.RPC_ENDPOINT,
    });

    console.log("ACCOUNT_ADDRESS=", process.env.DEPLOYER_ADDRESS);
    const privateKey0 = process.env.DEPLOYER_PRIVATE_KEY ?? "";
    const accountAddress0: string = process.env.DEPLOYER_ADDRESS ?? "";
    const account0 = new Account(provider, accountAddress0, privateKey0);
    console.log("Account connected.\n");

  
     let AsierraCode, AcasmCode, BsierraCode, BcasmCode, CsierraCode, CcasmCode, DsierraCode: any, DcasmCode: any, KsierraCode, KcasmCode;
    
     try {
        ({ AsierraCode, AcasmCode, BsierraCode, BcasmCode, CsierraCode, CcasmCode, DsierraCode, DcasmCode, KsierraCode, KcasmCode  } = await getCompiledCode(
        "attendsys_AttenSysCourse","attendsys_AttenSysEvent","attendsys_AttenSysOrg","attendsys_AttenSysNft", "attendsys_AttenSysSponsor"   
        ));
    } catch (error: any) {
        console.log("Failed to read contract files");
        console.log(error);
        process.exit(1);
    }
    const contract_owner = "0x021CAC809b7BACa1d74DD23e24C2BAbe44f15Dc30BD0D65eD23040f4F0BFe879"
    const STRK_Sepolia = "0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D"
    const zero_address = "0x0000000000000000000000000000000000000000000000000000000000000000"

    console.log("nft contract declared......\n")
    
    // async function declareAndGetClassHash() {
    //     // Initialize provider and account
    //     const account = new Account(provider, accountAddress0, privateKey0);
      
    //     // Read the compiled contract JSON
      
    //     // Declare the contract
    //     const { transaction_hash, class_hash } = await account.declare({
    //         contract: DsierraCode,
    //         casm: DcasmCode,
    //         classHash: undefined // Set to undefined to let Starknet compute it
    //     });
      
    //     // Wait for the transaction to be accepted
    //     await provider.waitForTransaction(transaction_hash);
      
    //     return class_hash;
    //   }

    // const nft_hash = (await declareAndGetClassHash()).toString;
    // console.log(nft_hash)


    const nft_hash = "0x0102b3f7e66131f95d7520fdda526329f2fb23b93a7c8f33c2e375dfeab77615"
    
    console.log("deploying attensys course.....\n");

    //for course 
    const CourseCallData = new CallData(AsierraCode.abi);
    const constructor_a = CourseCallData.compile("constructor", {
        owner: contract_owner,
        _hash : nft_hash
    });

    const coursedeployResponse = await account0.declareAndDeploy({
        contract: AsierraCode,
        casm: AcasmCode,
        constructorCalldata: constructor_a,
        salt: stark.randomAddress(),
    });

       // Connect the new course contract instance :
       const AttensysCourseContract = new Contract(
        AsierraCode.abi,
        coursedeployResponse.deploy.contract_address,
        provider
    );

    console.log("deploying attensys event.....\n");
   //for event 
   const EventCallData = new CallData(BsierraCode.abi);
   const constructor_b = EventCallData.compile("constructor", {
       owner: contract_owner,
       _hash : nft_hash,
       _token_address: STRK_Sepolia,
       sponsorship_contract_address : zero_address,
   });

   const eventdeployResponse = await account0.declareAndDeploy({
       contract: BsierraCode,
       casm: BcasmCode,
       constructorCalldata: constructor_b,
       salt: stark.randomAddress(),
   });

      // Connect the new contract instance :
      const AttensysEventContract = new Contract(
        BsierraCode.abi,
        eventdeployResponse.deploy.contract_address,
       provider
   ); 

   console.log("deploying attensys org.....\n");
   //for org 
   const OrgCallData = new CallData(CsierraCode.abi);
   const constructor_c = OrgCallData.compile("constructor", {
        admin: contract_owner,
       class_hash : nft_hash,
       _token_address: STRK_Sepolia,
       sponsorship_contract_address : zero_address,
   });

   const orgdeployResponse = await account0.declareAndDeploy({
       contract: CsierraCode,
       casm: CcasmCode,
       constructorCalldata: constructor_c,
       salt: stark.randomAddress(),
   });

      // Connect the new contract instance :
      const AttensysOrgContract = new Contract(
        CsierraCode.abi,
        orgdeployResponse.deploy.contract_address,
       provider
   );

   console.log("deploying attensys sponsor contract.....\n");
   

   const SponsorCallData = new CallData(KsierraCode.abi);
   const constructor_k = SponsorCallData.compile("constructor", {
        admin: contract_owner,
        organization_contract_address : AttensysOrgContract.address,
        event_contract_address: AttensysOrgContract.address
   });

   const sponsordeployResponse = await account0.declareAndDeploy({
       contract: KsierraCode,
       casm: KcasmCode,
       constructorCalldata: constructor_k,
       salt: stark.randomAddress(),
   });

      // Connect the new contract instance :
      const AttensysSponsorContract = new Contract(
        KsierraCode.abi,
        sponsordeployResponse.deploy.contract_address,
       provider
   );

   
   
    console.log(
        `Attensys course deployed to address: ${AttensysCourseContract.address}`
    );
    console.log(
        `Attensys Event deployed to address: ${AttensysEventContract.address}`
    ); 
    console.log(
        `Attensys Org deployed to address: ${AttensysOrgContract.address}`
    );
    console.log(
        `Attensys Sponsor deployed to address: ${AttensysSponsorContract.address}`
    );

    const abiFileContent = `${Comment}\n\n
    export const attensysCourseAbi = ${JSON.stringify(AttensysCourseContract.abi, null, 2)};  
    export const attensysEventAbi = ${JSON.stringify(AttensysEventContract.abi, null, 2)};   
    export const attensysOrgAbi = ${JSON.stringify(AttensysOrgContract.abi, null, 2)};
    export const attensysSponsorAbi = ${JSON.stringify(AttensysSponsorContract.abi, null, 2)};
  `;

    const contracts = `${Comment}\n\n
    export const attensysCourseAddress = ${JSON.stringify(AttensysCourseContract.address, null, 2)};  
    export const attensysEventAddress = ${JSON.stringify(AttensysEventContract.address, null, 2)};   
    export const attensysOrgAddress = ${JSON.stringify(AttensysOrgContract.address, null, 2)};
    export const attensysSponsorAddress = ${JSON.stringify(AttensysSponsorContract.address, null, 2)};
    `;
    
  // Write to abi.ts
  const formattedAbiFileContent = await prettier.format(abiFileContent, { parser: 'typescript' });
  fs.writeFileSync(OUTPUT_FILE, formattedAbiFileContent);
  console.log(`✨✅ ABI file generated and saved at: ${OUTPUT_FILE}\n`);

  const formattedContractContent = await prettier.format(contracts, { parser: 'typescript' });
  fs.writeFileSync(CONTRACT_OUTPUT_FILE, formattedContractContent);
  console.log(`✨✅ Contract addresses generated and saved at: ${CONTRACT_OUTPUT_FILE}\n`);
}


main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });